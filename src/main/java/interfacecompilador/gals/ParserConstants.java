package interfacecompilador.gals;

public interface ParserConstants
{
    int START_SYMBOL = 35;

    int FIRST_NON_TERMINAL    = 35;
    int FIRST_SEMANTIC_ACTION = 62;

    int[][] PARSER_TABLE =
            {
                    { -1,  0, -1, -1, -1, -1,  0, -1, -1, -1, -1,  0, -1, -1,  0, -1,  0,  0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
                    { -1,  4, -1, -1, -1, -1,  4, -1, -1, -1, -1,  4, -1, -1,  4, -1,  4,  4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
                    {  5,  6, -1, -1, -1, -1,  6, -1,  5,  5, -1,  6, -1, -1,  6, -1,  6,  6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
                    { -1,  7, -1, -1, -1, -1, 11, -1, -1, -1, -1, 10, -1, -1,  8, -1,  9,  9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
                    { -1, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
                    { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, -1, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
                    { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
                    { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
                    { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
                    { -1, -1, -1, -1, -1, -1, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
                    { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 26, -1, -1, -1, -1, 25, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
                    { -1, 18, 18, 18, 18, 18, -1, -1, -1, -1, 18, -1, 18, -1, -1, 18, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, -1, -1, -1, -1, 18, 18, -1, -1 },
                    { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 20, -1, -1, -1, -1, 19, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
                    { -1,  1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
                    { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  3, -1,  2, -1, -1,  2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
                    { -1, 27, 27, 27, 27, 27, -1, -1, -1, -1, 27, -1, 27, -1, -1, 27, -1, -1, -1, -1, -1, -1, 27, -1, -1, -1, -1, -1, -1, -1, 27, 27, -1, -1 },
                    { -1, -1, -1, -1, -1, -1, -1, 29, -1, -1, -1, -1, -1, 30, -1, -1, -1, -1, 28, 28, -1, 28, -1, 28, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
                    { -1, 31, 31, 31, 31, 31, -1, -1, -1, -1, 33, -1, 34, -1, -1, 32, -1, -1, -1, -1, -1, -1, 31, -1, -1, -1, -1, -1, -1, -1, 31, 31, -1, -1 },
                    { -1, 35, 35, 35, 35, 35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 35, -1, -1, -1, -1, -1, -1, -1, 35, 35, -1, -1 },
                    { -1, -1, -1, -1, -1, -1, -1, 36, -1, -1, -1, -1, -1, 36, -1, -1, -1, -1, 36, 36, -1, 36, -1, 36, 37, 37, 37, 37, 37, 37, -1, -1, -1, -1 },
                    { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 38, 39, 40, 41, 42, 43, -1, -1, -1, -1 },
                    { -1, 44, 44, 44, 44, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, -1, -1, -1, -1, 44, 44, -1, -1 },
                    { -1, -1, -1, -1, -1, -1, -1, 45, -1, -1, -1, -1, -1, 45, -1, -1, -1, -1, 45, 45, -1, 45, -1, 45, 45, 45, 45, 45, 45, 45, 46, 47, -1, -1 },
                    { -1, 48, 48, 48, 48, 48, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 48, -1, -1, -1, -1, -1, -1, -1, 48, 48, -1, -1 },
                    { -1, -1, -1, -1, -1, -1, -1, 49, -1, -1, -1, -1, -1, 49, -1, -1, -1, -1, 49, 49, -1, 49, -1, 49, 49, 49, 49, 49, 49, 49, 49, 49, 50, 51 },
                    { -1, 52, 53, 54, 55, 56, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57, -1, -1, -1, -1, -1, -1, -1, 58, 59, -1, -1 },
                    { -1, -1, -1, -1, -1, -1, -1, -1, 23, 22, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }
            };

    int[][] PRODUCTIONS =
            {
                    { 77, 83, 36, 78 },
                    {  2, 84, 49 },
                    {  0 },
                    { 19, 48 },
                    { 38, 22, 37 },
                    {  0 },
                    { 36 },
                    { 39 },
                    { 41 },
                    { 42 },
                    { 43 },
                    { 44 },
                    { 48, 21, 50, 40 },
                    { 86 },
                    { 87, 20, 12, 50, 88 },
                    { 15, 23, 48, 89, 24 },
                    { 17, 23, 46, 24 },
                    { 18, 23, 46, 24, 79 },
                    { 50, 76, 47 },
                    {  0 },
                    { 19, 46 },
                    { 12, 23, 50, 24, 90, 36, 61, 10, 91 },
                    {  0 },
                    { 92,  9, 36 },
                    {  7, 93, 23, 50, 24, 20, 12, 45, 94, 36, 10, 95 },
                    { 16 },
                    { 11 },
                    { 52, 51 },
                    {  0 },
                    {  8, 52, 80, 51 },
                    { 14, 52, 81, 51 },
                    { 53 },
                    { 16, 73 },
                    { 11, 74 },
                    { 13, 52, 75 },
                    { 56, 54 },
                    {  0 },
                    { 55, 71, 56, 72 },
                    { 25 },
                    { 26 },
                    { 27 },
                    { 28 },
                    { 29 },
                    { 30 },
                    { 58, 57 },
                    {  0 },
                    { 31, 58, 63, 57 },
                    { 32, 58, 64, 57 },
                    { 60, 59 },
                    {  0 },
                    { 33, 60, 65, 59 },
                    { 34, 60, 66, 59 },
                    {  2, 85 },
                    {  3, 67 },
                    {  4, 68 },
                    {  5 },
                    {  6, 82 },
                    { 23, 50, 24 },
                    { 31, 60 },
                    { 32, 60, 70 }
            };


    String[] PARSER_ERROR =
            {
                    "",
                    "esperado EOF",
                    "esperado identificador",
                    "esperado constante_int",
                    "esperado constante_float",
                    "esperado constante_binaria",
                    "esperado constante_string",
                    "esperado check",
                    "esperado and",
                    "esperado else",
                    "esperado end",
                    "esperado false",
                    "esperado if",
                    "esperado not",
                    "esperado or",
                    "esperado read",
                    "esperado true",
                    "esperado write",
                    "esperado writeln",
                    "esperado ,",
                    "esperado :",
                    "esperado =",
                    "esperado ;",
                    "esperado (",
                    "esperado )",
                    "esperado ==",
                    "esperado !=",
                    "esperado <",
                    "esperado <=",
                    "esperado >",
                    "esperado >=",
                    "esperado +",
                    "esperado -",
                    "esperado *",
                    "esperado /",
                    "esperado identificador check if read write writeln", //<lista_de_comandos> inválido
                    "esperado EOF identificador check else end if read write writeln", // <lista_de_comandos_1> inválido"
                    "esperado identificador check if read write writeln",//<comando> inválido"
                    "esperado identificador",//<comando_atribuicao> inválido"
                    "esperado : ;",//<comando_atribuicao_1> inválido"
                    "esperado read",//<comando_entrada_dados> inválido"
                    "esperado write writeln",//<comando_saida_dados> inválido"
                    "esperado if",//<comando_selecao> inválido"
                    "esperado else end",//<comando_selecao_1> inválido"
                    "esperado check",//<comando_repeticao> inválido"
                    "esperado false true",//<comando_repeticao_1> inválido"
                    "esperado expressão",//<lista_expressoes> invlido"
                    "esperado , )",//<lista_expressoes_1> inv�lido"
                    "esperado identificador",//<lista_identificadores> inválido"
                    "esperado , = )",//<lista_identificadores_1> inválido"
                    "esperado expressão",//<expressao> inválido"
                    "esperado expressão",//<expressao_> inválido"
                    "esperado expressão",//<elemento> inválido"
                    "esperado expressão",//<relacional> inválido"
                    "esperado expressão",//<relacional_> inválido"
                    "esperado == != < <= > >=",//<operador_relacional> inválido"
                    "esperado expressão",//<aritmetica> inválido"
                    "esperado expressão",//<aritmetica_> inválido"
                    "esperado expressão",//<termo> inválido"
                    "esperado expressão",//<termo_> inválido"
                    "esperado expressão",//<fator> inválido"
                    "esperado else" //<else> inválido
            };
}