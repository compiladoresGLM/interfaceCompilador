#Options
GenerateScanner = true
GenerateParser = true
Language = Java
ScannerName = Lexico
ParserName = Sintatico
SemanticName = Semantico
ScannerCaseSensitive = true
ScannerTable = Compact
Input = Stream
Parser = LL
#RegularDefinitions
digito: [0-9]
min: [a-z]
mai: [A-Z]
letra: {mai} | {min}
int_aux: [1-9] ({digito}? {digito}?)
inteiro: {int_aux}(\.[0-9] [0-9] [0-9])*|0





 
#Tokens
//A) 
 identificador : ({mai} ({min}{mai}?)* | ({min}{mai}?)+) ({digito}?{digito})?

//B)
constante_int: {inteiro}

//C)
constante_float: {inteiro}, {digito}+

//D)
binario: 0(b|B)(0|1)+

//E
string: \"[^\n\"\\]*\"

//F
:! #[^\n]*

//G
:! (\{\n) [^\{\}]* (\n\}) | (\{\n\})


//constante_int - faz de todas 

//palavras reservadas 
check = identificador: "check" //como a palavra tem que ser escrita
and = identificador: "and"
else = identificador: "else"
end = identificador: "end"
false = identificador: "false"
if = identificador: "if"
not = identificador: "not"
or = identificador: "or"
read = identificador: "read"
true = identificador: "true"
write = identificador: "write"
writeln = identificador: "writeln"

// simbolos especiais 

","
":"
"="
";"
"("
")"
"=="
"!="
"<"
"<="
">"
">="
"+"
"-"
"*"
"/"


//formatação   de formatação - reconhecer e ignorar
:[\s\t\n] // ignorar

// comentarios 
:! # [^\n]*


#NonTerminals
<lista_de_comandos>
<lista_de_comandos_1> 
<comando>
<comando_atribuicao>
<comando_atribuicao_1> 	
<comando_entrada_dados>
<comando_saida_dados>
<comando_selecao> 
<comando_selecao_1>
<comando_repeticao>
<comando_repeticao_1>
<lista_expressoes>
<lista_expressoes_1>
<lista_identificadores>
<lista_identificadores_1>
<expressao>
<expressao_>	
<elemento>
<relacional>
<relacional_>	
<operador_relacional>
<aritmetica>	
<aritmetica_>
<termo>		
<termo_>
<fator>
#Grammar
<lista_de_comandos> 	::= <comando> ";" <lista_de_comandos_1> ;
<lista_de_comandos_1> 	::= î |  <lista_de_comandos> ;


<comando> 		::= <comando_atribuicao> | <comando_entrada_dados> | <comando_saida_dados> |<comando_selecao> | <comando_repeticao> ;

<comando_atribuicao> 	::= <lista_identificadores> "=" <expressao> <comando_atribuicao_1> ;
<comando_atribuicao_1> 	::= ":" if <expressao> ;

<comando_entrada_dados> 	::= read "(" <lista_identificadores> ")" ;
 
<comando_saida_dados> 	::= write "(" <lista_expressoes> ")" |
		        	writeln "(" <lista_expressoes> ")" ;

<comando_selecao>   	::= if "(" <expressao> ")" <lista_de_comandos> <comando_selecao_1> ;
<comando_selecao_1> 	::= end | else <lista_de_comandos> end ;

<comando_repeticao> 	::= check "(" <expressao> ")" ":" if <comando_repeticao_1> ;
<comando_repeticao_1>	::= true <lista_de_comandos> end | false <lista_de_comandos> end ;

<lista_expressoes> 	::= <expressao> <lista_expressoes_1> ;
<lista_expressoes_1>	::= î | "," <lista_expressoes> ;

<lista_identificadores> 	::= identificador <lista_identificadores_1> ;
<lista_identificadores_1> 	::= î | "," <lista_identificadores> ;


<expressao>			::= <elemento> <expressao_>  ;
<expressao_>			::= î | and <elemento> <expressao_> | or <elemento> <expressao_> ;
<elemento>			::= <relacional> | true | false | not <elemento> ;

<relacional>			::= <aritmetica> <relacional_> ;
<relacional_>			::= î | <operador_relacional> <aritmetica> ;
<operador_relacional>		::= "==" | "!=" | "<" | "<=" | ">" | ">=" ;

<aritmetica>			::= <termo> <aritmetica_>  ;
<aritmetica_>			::= î | "+" <termo> <aritmetica_> | "-" <termo> <aritmetica_> ;

<termo>				::= <fator> <termo_> ;
<termo_>			::= î | "*" <fator> <termo_> | "/" <fator> <termo_> ;

<fator>			::= identificador | 
			    	    constante_int | 
		   	    	    constante_float | 
			    	    binario |
			    	    string | 
		   	    	    "(" <expressao> ")" |
	    	  	    	    "+" <fator> | 
	    		    	    "-" <fator> ;

